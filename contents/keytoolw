#!/usr/bin/env bash
set -eu

usage() {
	printf "Usage: --action <%s> [--jdk-home <>] [--keystore-path <>] [--cert-path <>]\n" "$*"
}

options_parse() {
	unrecognized_args=()

    while (( "$#" > 0 ))
    do
        OPT="$1"
        case "$OPT" in
        	--action)        action=$2        ; shift 2 ;;
            --jdk-home)      jdk_home=$2      ; shift 2 ;;
            --keystore-path) keystore_path=$2 ; shift 2 ;;
            --cert-path)     cert_path=$2     ; shift 2 ;;
			--age-thresh)	 age_thresh=$2    ; shift 2 ;;
            # help option
            -\?|--help)
                usage
                exit 2
                ;;
            # unrecognized arguments
            *)
              unrecognized_args+=("$OPT")
              shift
              ;;
        esac
    done

    # Set defaultable options.

    # Check required options are set
	if [[ " ${actions[@]} " =~ " ${action} " ]]
	then
		:
	else
		printf "Action unrecoginized '%s'\n" "$action"
		return 2
	fi
    return 0
}

check_keytool() {
	# If it's executable, use the keytool for the specified JDK
	#  otherwise, use what's in the $PATH
	local jdk=$1 keytool=''

	if [[ -x "$jdk/jre/bin/keytool" ]]
	then 
		keytool=$jdk/jre/bin/keytool
	else
		# Check the $PATH for it.
		if ! keytool=$(type -p keytool)
		then 
			:
		fi
	fi
	if [[ -z "${keytool:-}" ]]; then
		printf "ERROR: keytool executable not found."
		return 1
	fi
	printf "%s" $keytool
	return 0
}

# Check which certificates are in a Java keystore
action:list() {
	# Build the arguments list
	local keystore=$1 alias=$2 password=$3
	local clopts=( -list -v -keystore "$keystore")
	[[ -n "$alias" ]] && clopts+=( -alias "$alias")
	[[ -n "$password" ]] && clopts+=( -storepass "$password")

	# Run it.
	command $keytool "${clopts[@]}"
}

action:printcert() {
	# Run the printcert action
	local cert_file=$1
	command $keytool -printcert -v -file "$cert_file"
}

action:checkExp() {
	# Build the arguments list
	local keystore=$1 alias=$2 password=$3 ageThresh=$4
	local keytoolOut='' expDateString='' dateTrim='' expDate
	local dateYYYY='' dateMM='' dateDD='' dateMon='' i=0 secondsDiff=0 daysDiff=0
	local months=( JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC )
	local clopts=( -list -v -keystore "$keystore")
	[[ -n "$alias" ]] && clopts+=( -alias "$alias")
	[[ -n "$password" ]] && clopts+=( -storepass "$password")

	# Run and print it.
	keytoolOut=$(command $keytool "${clopts[@]}") || { echo $keytoolOut; exit 1; }
	expDateString=$(printf "%s" "$keytoolOut" | awk -Funtil: '/until:/ {print $2;exit;}')
	echo "$alias expires on:$expDateString"

	# Strip leading spaces and capture date. Different versions of java display the 'until' date differently
	dateTrim=$(echo $expDateString | awk '{print $1}')

	if [[ $dateTrim =~ ^[0-9] ]]
	then
		# Date was provided in number format (java8+)
		dateMM=$( printf %02d `echo $dateTrim | awk -F/ '{print $1}'` )
		dateDD=$( printf %02d `echo $dateTrim | awk -F/ '{print $2}'` )
		dateYYYY=$(echo $dateTrim | awk -F/ '{print "20"$3}')

		expDate=$dateYYYY-$dateMM-$dateDD
	else
		# Date was provided in word format (<java8). Convert to numeric
		dateMon=$( echo $expDateString | awk '{print $2}' | tr [a-z] [A-Z] )

		for (( i=0; i<11; i++ )); do
			[[ $dateMon = ${months[i]} ]] && break;
		done

		dateMM=` printf %02d $((i+1)) `
		dateDD=$( printf %02d `echo $expDateString | awk '{print $3}'` )
		dateYYYY=$( echo $expDateString | awk '{print $6}' )

		expDate=$dateYYYY-$dateMM-$dateDD
	fi
	
	# How many days between today and $expDate?
	secondsDiff=$(( `date -d $expDate +%s` - `date +%s` ))
	daysDiff=$( echo $secondsDiff/86400 | bc )
	echo "Your certificate expires in $daysDiff days."

	if [[ -n "$ageThresh" ]]
	then
		# check against specified threshhold and fail if necessary
		if [[ "$daysDiff" -le "$ageThresh" ]]
		then
			printf "%s" "It's time to renew your certficate for $alias!" 1>&2
			exit 3
		else
			:
		fi
	else
		:
	fi

}

#Begin script execution

declare -r actions=(list printcert checkExp)
declare -r keystore_password="${RD_CONFIG_KEYSTORE_PASSWORD:-}"

if ! options_parse "$@"
then
	usage "${actions[@]}"
	exit 2
fi

keytool=$(check_keytool "$jdk_home")

case "$action" in	
	list) 
		action:list "$keystore_path" "${RD_CONFIG_ALIAS:-}" "$keystore_password"
	;;
	printcert) 
		action:printcert "$cert_path"
	;;	
	checkExp)
		action:checkExp "$keystore_path" "${RD_CONFIG_ALIAS:-}" "$keystore_password" "$age_thresh"
	;;
	*) usage
	;;
esac

exit $?